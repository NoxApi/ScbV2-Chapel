// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class user extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save user entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type user must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("user", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): user | null {
    return changetype<user | null>(store.get("user", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get Token(): Array<string> {
    let value = this.get("Token");
    return value!.toStringArray();
  }

  set Token(value: Array<string>) {
    this.set("Token", Value.fromStringArray(value));
  }
}

export class token extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("evolform", Value.fromBigInt(BigInt.zero()));
    this.set("race", Value.fromBigInt(BigInt.zero()));
    this.set("amount", Value.fromBigInt(BigInt.zero()));
    this.set("foodindex", Value.fromI32(0));
    this.set("User", Value.fromBytes(Bytes.empty()));
    this.set("Exp", Value.fromBigInt(BigInt.zero()));
    this.set("LastestReclaim", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save token entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type token must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("token", id.toString(), this);
    }
  }

  static load(id: string): token | null {
    return changetype<token | null>(store.get("token", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get evolform(): BigInt {
    let value = this.get("evolform");
    return value!.toBigInt();
  }

  set evolform(value: BigInt) {
    this.set("evolform", Value.fromBigInt(value));
  }

  get race(): BigInt {
    let value = this.get("race");
    return value!.toBigInt();
  }

  set race(value: BigInt) {
    this.set("race", Value.fromBigInt(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get foodindex(): i32 {
    let value = this.get("foodindex");
    return value!.toI32();
  }

  set foodindex(value: i32) {
    this.set("foodindex", Value.fromI32(value));
  }

  get User(): Bytes {
    let value = this.get("User");
    return value!.toBytes();
  }

  set User(value: Bytes) {
    this.set("User", Value.fromBytes(value));
  }

  get Exp(): BigInt {
    let value = this.get("Exp");
    return value!.toBigInt();
  }

  set Exp(value: BigInt) {
    this.set("Exp", Value.fromBigInt(value));
  }

  get LastestReclaim(): BigInt {
    let value = this.get("LastestReclaim");
    return value!.toBigInt();
  }

  set LastestReclaim(value: BigInt) {
    this.set("LastestReclaim", Value.fromBigInt(value));
  }

  get Food(): Array<string> | null {
    let value = this.get("Food");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set Food(value: Array<string> | null) {
    if (!value) {
      this.unset("Food");
    } else {
      this.set("Food", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class food extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("amount", Value.fromBigInt(BigInt.zero()));
    this.set("unlockweek", Value.fromBigInt(BigInt.zero()));
    this.set("Token", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save food entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type food must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("food", id.toString(), this);
    }
  }

  static load(id: string): food | null {
    return changetype<food | null>(store.get("food", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get unlockweek(): BigInt {
    let value = this.get("unlockweek");
    return value!.toBigInt();
  }

  set unlockweek(value: BigInt) {
    this.set("unlockweek", Value.fromBigInt(value));
  }

  get Token(): string {
    let value = this.get("Token");
    return value!.toString();
  }

  set Token(value: string) {
    this.set("Token", Value.fromString(value));
  }
}
